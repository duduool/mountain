worker_processes 1;
error_log logs/error.log;

events {
	worker_connections 1024;
}

http {
	lua_code_cache off;
    #lua_package_path '/opt/zbstudio/lualibs/?/?.lua;/opt/zbstudio/lualibs/?.lua;;';
    #lua_package_cpath '/opt/zbstudio/bin/linux/x64/clibs/?.so';

    #lua_package_path "/home/www/qiaox/LuaPro/base/?.lua;;";
    #lua_package_cpath "/home/www/qiaox/LuaPro/base/?.so;;";

    #init_by_lua "cjson = require 'cjson'";
    init_by_lua_file /usr/local/openresty/luainit/init.lua;

	map $args $foo {
		default 0;
		debug 	1;
	}

    server {
        listen 8787;
        server_name dd.love.com;

        location ~ \.php$ {
            root          html;
            fastcgi_pass  127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include       fastcgi_params;
        }
    }

	server {
		listen 8989;
        server_name I.love.u;

        # 为不同的项目设置不同的路径
		set $SERVER_DIR app;
		set $BASE_PATH /home/www/qiaox/LuaPro/base/$SERVER_DIR;

		location / {
			default_type text/html;
			resolver 114.114.114.114;
			
			lua_socket_log_errors off;
            lua_need_request_body on;

			content_by_lua_file $BASE_PATH/serv.lua;
		}

        location ~ ^/test {
            default_type text/html;
        
            content_by_lua_file $BASE_PATH/test.lua;
        }

		location ~ ^/redis {
			default_type text/html;
			content_by_lua_block {
				function get_redis()
					local redis = require("resty.redis")
					local cache = redis:new()
					local ok, err = cache:connect("127.0.0.1", "6379")
				
					ok, err = cache:set("dog", "an animal")
					if not ok then
				 		ngx.say("Failed to set dog:", err)
						return
					end
					ngx.say("Set result:", ok)
				end
				local json = require("cjson")
				local str = [[ {
					"name": "qiaox",
					"age": "22"
				} ]]

				local t = json.decode(str)
				ngx.say("-->", type(t))
				for k, v in pairs(t) do
					ngx.say(k, v)
				end
				ngx.print("Hello, world")
			}
		}

        location ~ ^/mysql {
            content_by_lua_block {
                local mysql = require "resty.mysql"
                local cjson = require "cjson"
                local db = mysql:new()
                db:set_timeout(3000)
                db:connect({
                    host = "192.168.50.202",
                    port = 3306,
                    user = "test",
                    password = "123456",
                    database = "test",
                    max_packet_size = 1024 * 1024
                })
                local res = db:query("SELECT * FROM people", 10)
                ngx.say(cjson.encode(res))
                db:set_keepalive(10000, 100)
            }
        }

		location ~ ^/builtins {
			# 二进制流，浏览器访问会直接下载
			# default_type application/octet-stream; 
			default_type application/json;
			#resolver 114.114.114.114;

			#set_unescape_uri $a $arg_a;

			#echo "a: $a";
				
			#set $origin_foo $foo;
			#set $args debug;

			#echo "original foo: $origin_foo";
			#echo "foo: $foo";
		    content_by_lua_file $BASE_PATH/builtins.lua;
		}
	}
}
